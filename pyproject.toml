# cspell: ignore junitxml

# cspell: ignore junitxml
[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools_scm[toml] >= 7.0.5", # required for "no-local-version" scheme
  "setuptools >= 65.3.0"
]

[dependency-groups]
dev = [
  "coverage>=7.10.6",
  "packaging>=25.0.0", # indirect
  "pytest-plus>=0.8.1",
  "pytest-xdist>=3.8.0",
  "pytest>=8.4.2"
]
docs = ["mkdocs>=1.6.1"]
lint = [
  "pip>=25.2",
  "pre-commit-uv>=4.1.4",
  "pre-commit>=4.1",
  "pytest>=7.2.2",
  "setuptools>=51.1.1"
]
pkg = ["build>=1.3.0", "pip>=25.2", "pipx>=1.7.1", "twine>=4.0.1"]

[project]
authors = [{"email" = "info@ansible.com", "name" = "Ansible by Red Hat"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: MkDocs",
  "Programming Language :: JavaScript",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Documentation",
  "Topic :: Software Development :: Documentation",
  "Topic :: Text Processing :: Markup :: HTML"
]
dependencies = [
  "cairosvg>=2.7.1",
  "cffi>=1.17.1",
  "linkchecker>=10.5.0",
  "markdown-exec>=1.10.0",
  "markdown-include>=0.8.1",
  "mkdocs-gen-files>=0.5.0",
  "mkdocs-htmlproofer-plugin>=1.3.0",
  "mkdocs-macros-plugin>=1.3.7",
  "mkdocs-material-extensions>=1.3.1",
  "mkdocs-material>=9.6.13",
  "mkdocs-minify-plugin>=0.8.0",
  "mkdocs>=1.6.1",
  "mkdocstrings-python>=0.16.0",
  "mkdocstrings>=0.28.1",
  "pillow>=11.1.0",
  "pymdown-extensions>=10.14.3"
]
description = "Ansible MkDocs Theme based on mkdocs-material"
dynamic = ["version"]
keywords = ["ansible", "mkdocs", "theme"]
license = "MIT"
maintainers = [{"email" = "info@ansible.com", "name" = "Ansible by Red Hat"}]
name = "mkdocs-ansible"
readme = "docs/README.md"
requires-python = ">=3.11"

[project.entry-points."mkdocs.themes"]
ansible = "mkdocs_ansible"

[project.urls]
changelog = "https://github.com/ansible/mkdocs-ansible/releases"
documentation = "https://ansible.readthedocs.io/projects/mkdocs-ansible/"
homepage = "https://github.com/ansible/mkdocs-ansible"
repository = "https://github.com/ansible/mkdocs-ansible"

[tool.codespell]
# indention is a typo in ruamel.yaml's API
ignore-words-list = "indention"
skip = ".tox,.mypy_cache,build,.git,.eggs,uv.lock,pip-wheel-metadata"

# Keep this default because xml/report do not know to use load it from config file:
# data_file = ".coverage"
[tool.coverage.paths]
source = ["src", "test", ".tox/*/site-packages"]

[tool.coverage.report]
exclude_also = ["pragma: no cover", "if TYPE_CHECKING:"]
# Increase it just so it would pass on any single-python run
fail_under = 82
# During development we might remove code (files) with coverage data, and we dont want to fail:
ignore_errors = true
omit = ["test/*", "src/mkdocs_ansible/_version.py"]
partial_branches = ["pragma: no cover", "if TYPE_CHECKING:"]
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
# branch is more reliable than lines, protects against false positives
branch = true
concurrency = ["multiprocessing", "thread"]
parallel = true
source = ["src"]

[tool.mypy]
exclude = "(.config|build|dist|test/local-content|site-packages|~/.pyenv|examples/playbooks/collections|plugins/modules)"
# https://github.com/python/mypy/issues/12664
python_version = "3.11"
strict = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = ["mkdocs_ansible._version"]
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = ["mkdocs_ansible"]
warn_unused_ignores = false # https://github.com/python/mypy/issues/13201

[tool.pylint.MASTER]
ignore-paths = "^src/.*/(_version|_vendor).*$"

[tool.pytest.ini_options]
addopts = "-p no:pytest_cov --durations=10 --durations-min=1.0 --failed-first"
testpaths = ["test"]

[tool.ruff]
cache-dir = "./.cache/.ruff"
exclude = [".config"]
fix = true
# Same as Black.
line-length = 88
preview = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools]
include-package-data = true

[tool.setuptools.package-data]
"*" = ["*.css", "*.html", "*.js"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
# To prevent accidental pick of mobile version tags such 'v6'
git_describe_command = [
  "git",
  "describe",
  "--dirty",
  "--long",
  "--tags",
  "--match",
  "v*.*"
]
local_scheme = "no-local-version"
tag_regex = "^(?P<prefix>v)?(?P<version>\\d+[^\\+]*)(?P<suffix>.*)?$"
version_file = "src/mkdocs_ansible/_version.py"

[tool.tomlsort]
in_place = true
sort_inline_tables = true
sort_table_keys = true

[tool.tox]
env_list = ["py", "lint", "pkg", "docs", "devel", "lower"]
requires = ["setuptools>=65.3", "tox>=4.30.2", "tox-extra>=2.1", "tox-uv>=1.28"]
skip_missing_interpreters = true

[tool.tox.env.deps]
commands = [
  [
    "pre-commit",
    "run",
    "--all-files",
    "--show-diff-on-failure",
    "--hook-stage",
    "manual",
    "deps"
  ],
  ["pre-commit", "autoupdate"],
  ["tox", "run", "-e", "lint"]
]
commands_pre = []
dependency_groups = ["lint"]
description = "Bump all test dependencies"
env_dir = "{work_dir}/lint"
skip_install = true

[tool.tox.env.devel]
dependency_groups = ["dev"]
description = "Run the tests with newest dependencies (no lock and allowing prereleases)"
runner = "uv-venv-runner"
uv_sync_flags = ["--upgrade", "--prerelease=allow"]
uv_sync_locked = false

[tool.tox.env.docs]
commands = [
  [
    "mkdocs",
    {default = ["build", "--strict", "--site-dir=_readthedocs/html/"], extend = true, replace = "posargs"}
  ]
]
dependency_groups = ["docs"]
description = "Builds docs"
skip_install = false
set_env.DYLD_FALLBACK_LIBRARY_PATH = "/opt/homebrew/lib:{env:LD_LIBRARY_PATH}"
set_env.NO_COLOR = "1"
set_env.TERM = "dump"

[tool.tox.env.lint]
commands = [["pre-commit", "run", "--all-files", "--show-diff-on-failure"]]
commands_pre = []
dependency_groups = ["lint"]
description = "Run all linters"
skip_install = true

[tool.tox.env.lower]
dependency_groups = ["dev"]
description = "Install using lowest constraints possible."
runner = "uv-venv-runner"
uv_resolution = "lowest"

[tool.tox.env.pkg]
commands = [
  ["rm", "-rf", "{tox_root}/dist/"],
  [
    "python",
    "-m",
    "build",
    "--outdir",
    "{tox_root}/dist/",
    "{tox_root}"
  ],
  ["sh", "-c", "python -m twine check --strict {tox_root}/dist/*"]
]
commands_pre = []
dependency_groups = ["pkg"]
description = """
Build package, verify metadata, install package and assert behavior when ansible is missing.
"""
skip_install = true

[tool.tox.env_run_base]
allowlist_externals = [
  "bash",
  "find",
  "git",
  "rm",
  "sh",
  "tox",
  "{tox_root}/tools/report-coverage"
]
commands = [
  [
    "python",
    "-m",
    "coverage",
    "run",
    "-m",
    "pytest",
    {default = [
      "-ra",
      "--showlocals",
      "--doctest-modules",
      "--durations=10",
      "--junitxml=./junit.xml"
    ], extend = true, replace = "posargs"}
  ],
  ["{tox_root}/tools/report-coverage"]
]
commands_pre = [["sh", "-c", "rm -f {env_dir}/.coverage.* 2>/dev/null || true"]]
description = """Run the tests: py{py_dot_ver}"""
package = "editable"
pass_env = [
  "CI",
  "CURL_CA_BUNDLE",
  "FORCE_COLOR",
  "HOME",
  "LANG",
  "LC_*",
  "NO_COLOR",
  "PRE_COMMIT_HOME",
  "PYTEST_*",
  "PYTEST_REQPASS",
  "PYTHON*",
  "PYTHONBREAKPOINT",
  "PYTHONIOENCODING",
  "PYTHONPYCACHEPREFIX",
  "PY_COLORS",
  "REQUESTS_CA_BUNDLE",
  "RTD_TOKEN",
  "SETUPTOOLS_SCM_DEBUG",
  "SSH_AUTH_SOCK",
  "SSL_CERT_FILE",
  "UV_*"
]
runner = "uv-venv-lock-runner"

[tool.tox.env_run_base.set_env]
COVERAGE_FILE = "{env:COVERAGE_FILE:{env_dir}/.coverage.{env_name}}"
COVERAGE_PROCESS_START = "{tox_root}/pyproject.toml"
FORCE_COLOR = "1"
PIP_DISABLE_PIP_VERSION_CHECK = "1"
PRE_COMMIT_COLOR = "always"

[tool.uv]
package = true
